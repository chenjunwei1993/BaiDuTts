apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    def refix = rootProject.ext.app.refix
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        multiDexEnabled rootProject.ext.app.multiDexEnabled
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    repositories {
        flatDir {
            dirs 'libs', '../CompBaiDuTts/libs'
        }
    }

    signingConfigs {
        myConfig {
            storeFile file(rootProject.ext.sign.storeFile)
            storePassword rootProject.ext.sign.storePassword
            keyAlias rootProject.ext.sign.keyAlias
            keyPassword rootProject.ext.sign.keyPassword
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.myConfig
            minifyEnabled rootProject.ext.app.minifyEnabled
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.myConfig
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.android.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.android.targetCompatibilityVersion
    }

    flavorDimensions "color"

    //渠道
    productFlavors {
        d {
            dimension "color"
        }
        p {
            dimension "color"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                // apk_渠道名-版本号-版本名称-编译时间.apk
                def fileName = "${refix}_v${versionName}_${variant.productFlavors.name}_${releaseTime()}_${variant.buildType.name}.apk"
                outputFileName = fileName
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation rootProject.ext.dependencies.junit
    api rootProject.ext.dependencies.appcompatV7
    api rootProject.ext.dependencies.constraint
    api rootProject.ext.dependencies.rxpermissions
    api rootProject.ext.dependencies.rxandroid
    api rootProject.ext.dependencies.rxjava
    api project(':CompBaiDuTts')
}

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}
